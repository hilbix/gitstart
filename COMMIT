#!/bin/bash

OOPS()
{
{
printf 'OOPS:'
printf ' %q' "$@"
printf '\n'
} >&2
exit 23
}

given()
{
local a="$1" b

shift
for b
do
	[ ".$a" = ".$b" ] && return 0
done
return 1
}

# This is wrong
# We need to deescape here, too
moved()
{
local f t

f="${1%% -> *}"
t="${1#* -> }"

printf '#%-7s %-25q\t-> %q\n' moved "$f" "$t"
git exec git commit -m "$1" --only "$f" "$t"
}

while	IFS='' read -ru6 line
do
	a="${line:3}"
	case "$a" in
	('"'*'"')	a="${a%\"}"; a="${a#\"}"; a="$(echo -e "$a"x)"; a="${a%x}";;
	esac
	[ 0 = $# ] || given "$a" "$@" || continue;
	b="${line:0:3}"
	args=(--only)
	t=modified
	case "$b" in
	' M ')	git exec git add "$a";;
	'M  ')	;;
	'MM ')	t=patched; args=(--patch);;
	'AM ')	t=added;   args=(--patch);;
	'?? ')	given "$a" "$@" || continue; t=added; git exec git add "$a";;
	'A  ')	t=added;;
	'T  ')	t=changed;;
	' D ')	printf '#%-7s %q\n' DELETED "$a"; continue;;
	'D  ')	t=deleted;;
	'R  ')	moved "$a"; continue;;
	*)	OOPS unknown "$b:" "$a";;
	esac
	# Superfluous "git add"s above due to following:
	case "$a" in
	*/)	printf '#%-7s %q\n' STAGED "$a"; continue;;
	esac
	msg="$a $t"
	git exact -m "$msg" >/dev/null && [ modified = "$t" ] && msg="fixup! $msg"
	printf '#%-7s %q\n' "$t" "$a"
	git exec git commit -m "$msg" "${args[@]}" "$a"
done 6< <(git status --porcelain .)

git status

